---
title: "ACP for Image Compression"
author: "MP Etienne"
knitr:
  opts_chunk:
    out.width: "80%"
---

```{r utils, echo = FALSE}
library(parallel)
library(ggpubr)

library(tidyverse)

# Function to extract blocks in parallel, handling edge cases
extract_blocks_parallel <- function(channel_matrix, block_size) {
  h <- dim(channel_matrix)[1]  # Image height
  w <- dim(channel_matrix)[2]  # Image width

  # Get the number of cores available for parallel processing
  num_cores <- detectCores() - 1  # Use one less than available cores to avoid system overload
  
  # Define indices for parallelization
  indices <- expand.grid(seq(1, h, by = block_size), seq(1, w, by = block_size))
  
  # Define the function to extract a block from the matrix, handling edge effects
  extract_single_block <- function(index) {
    i <- as.numeric(index[1])
    j <- as.numeric(index[2])
    
    print(i)

    # Handle cases where the block exceeds the image size (edge cases)
    block <- channel_matrix[i:min(i + block_size - 1, h), j:min(j + block_size - 1, w)]
    
    # Flatten the block into a single row
    # If the block is smaller than 4x4 (due to edges), pad with NA or 0 to maintain consistent size
    flattened_block <- as.vector(block)
    
    # Pad the flattened block with NA (or 0 if you prefer) to ensure each block is of size block_size^2
    padded_block <- rep(NA, block_size * block_size)
    padded_block[1:length(flattened_block)] <- flattened_block
    
    return(padded_block)
  }

  # Parallelize the block extraction using mclapply
  blocks <- mclapply(1:nrow(indices), function(k) extract_single_block(indices[k,]), mc.cores = num_cores)
  
  # Combine the results into a matrix
  blocks_matrix <- do.call(rbind, blocks)
  
  return(blocks_matrix)
}

```

Pour bien comprendre comment sont décomposées les images en bloc de 16 par 16, on peut créer une matrice avecdes cases numérotées et constater comment elle est transformée.

Un bloc de 1- pixels est un individu à 16 variables.

```{r micro_example}
test_image <- array(1:1024, dim= c(32, 16, 1, 1))
test_image_blocks <- extract_blocks_parallel(test_image[,,1,1], block_size = 4)
test_image
test_image_blocks
```

## Peut on compresser les Beatles ?

On va travailler sur la fameuse image de l'album Abbey Road des Beatles.

![](img/abbey_road.jpg)

Pour la charger avec R, on utilise le package `imager` et la fonction `load.image`. puis la fonction `grayscale`pour bien s'assurer que l'image est codée en niveaux de gris.

```{r load_abbey}
#| message: false

library(imager)
image <- load.image('img/abbey_road.jpg')
image <- grayscale(image)
df_origine <-image %>% as.data.frame
p_origine <- ggplot(df_origine,aes(x,y))+geom_raster(aes(fill=value)) +
   scale_y_continuous(trans=scales::reverse_trans(), expand = c(0,0)) + ## pour mettre l'image dans le bon sens et supprimer les bors gris
  scale_x_continuous(expand=c(0,0)) +
  scale_fill_gradient(low="black",high="white") + ## pour le noir et blanc
  theme(legend.position = "none")

p_origine
```

L'objet obtenu est un `array` dont la première dimension est le nombre de pixels en ligne et la seconde dimension le nombre de pixel en colonnes. La troisème dimension est la profondeur et correspondrait au temps dan sun film par exemple et la dernière dimension est la couleur (on a donc 3 valeurs possibles sur cette dernière dimension dans le cas d'une image RGB et 1 dans le cas d'une image en niveau de gris).

Si on se concentre sur les deux premières dimensions, on a donc une matrice dont la valeur est le niveau de gris du pixel correspondant.

```{r understand_cimg}
dim(image)
gray_channel <- image[,,1,1]
gray_channel[1,1]
```

Pour rentrer dans le formalisme de l'ACP, on a besoin qu'une ligne soit un individu et une colonne une variable. Ici, le choix nous revient de définir comme on le souhaite ce qu'est un individu et une varaible.

On va découper l'image en buffer carré (patch, micro image) de coté $bs.$ Un individu sera un patch et une variable sera le niveau de gris dans un pixel particulier du patch.

On a donc $bs^2$ variables et $N_{buf} = (height/bs) * (width/bs)$ buffers/individus.

```{r prepare_abbey}
# Set block size to 4x4
block_size <- 4

# Extract blocks for each color channel in parallel
image_blocks <- extract_blocks_parallel(gray_channel, block_size)
dim(image_blocks)
```

### Réduction de dimension par ACP

On va maintenant mettre en oeuvre une ACP, pour détermnier les composantes principales et on ne gardera quelques composantes pour réduire la dimension. On utilise `FactoMineR`.

```{r acp_abbey}
library(FactoMineR)
images_pca <- PCA(X = image_blocks, scale.unit = TRUE, ncp = ncol(image_blocks))
```

Les valeurs propres nous donnent la quantité d'information contenu par chaque composante.

```{r eigenvalues}
eigen_restreint <- images_pca$svd$V
```

On constate que la première composante contient à elle toute seule `r images_pca$eig[1,2]`$\%$ d'inertie. Ce qui signifie qu'en écrivant chaque buffet comme un nombre réel multiplé par le premier buffer on recontruit presque $90\%$ de l'information. Dans ca cas on a juste besoin de stocker

-   la matrice $1\times bs^2$ qui permet de reconstruire les 16 variables initiales avec l'information contenu dans ce premier buffer,
-   les coefficients que chaque buffer individu attribue à ce premier buffer, soit $N_{buf}$

On passe donc $N_{buf} * 16$ réels à stocker à $N_{buf} + bs^2$ si on ne garde qu'une seule composante ou $2 N_{buf} + bs^2$ si on en garde 2.

Les vecteurs propres sont donnés par

```{r eigenvectors}
eigen_restreint <- images_pca$svd$V
```

On sait q'un vecteur propre correspond à un patch de $bc\times bs$, on peut donc les visualiser sous cette forme

```{r eigenvectors_buffer}
list_eigen <- lapply(1:block_size^2, function(i){
  X_restreint <- matrix(images_pca$svd$V[,i], ncol = 4, nrow = 4)
  image_eig <- as.cimg(array(X_restreint, dim = c(4,4,1,1)))
  p <- image_eig %>% as.data.frame() %>% ggplot(aes(x,y))+geom_raster(aes(fill=value)) +
   scale_y_continuous(trans=scales::reverse_trans(), expand = c(0,0)) + ## pour mettre l'image dans le bon sens et supprimer les bors gris
  scale_x_continuous(expand=c(0,0)) +
  scale_fill_gradient(low="black",high="white") + ## pour le noir et blanc
  theme(legend.position = "none") +
coord_fixed()
  return(p)
}
)

ggarrange(plotlist = list_eigen, ncol = 4)
```

### Reconstruction avec une seule composante principale

```{r reconstruction_abbey_1}
#| echo: true


new_coord <- images_pca$ind$coord
reconstruction <- new_coord[, 1, drop = FALSE]%*% t(images_pca$svd$V)[1,] 

n_row_block <- dim(image)[1]/block_size
n_col_block <- dim(image)[2]/block_size


X_reconstruction_list <- lapply(1:n_col_block, function(j){
  list_rows <- lapply(1:n_row_block, function(i){
    matrix( reconstruction[(j-1)*n_row_block + i,], ncol = block_size)
  })
  do.call(rbind, list_rows)
}  
)

X_reconstruction <- do.call(cbind, X_reconstruction_list)


df_1 <-as.cimg(array(X_reconstruction, dim=dim(image))) %>% as.data.frame
p_1 <- ggplot(df_1,aes(x,y))+geom_raster(aes(fill=value)) +
   scale_y_continuous(trans=scales::reverse_trans(), expand = c(0,0)) + ## pour mettre l'image dans le bon sens et supprimer les bors gris
  scale_x_continuous(expand=c(0,0)) +
  scale_fill_gradient(low="black",high="white") + ## pour le noir et blanc
  theme(legend.position = "none")

```

```{r reconstruction_abbey_2}
#| echo: true


new_coord <- images_pca$ind$coord
reconstruction_2 <- new_coord[, 1:2]%*% t(images_pca$svd$V)[1:2,] 

X_reconstruction_list_2 <- lapply(1:n_col_block, function(j){
  list_rows <- lapply(1:n_row_block, function(i){
    matrix( reconstruction_2[(j-1)*n_row_block + i,], ncol = block_size)
  })
  do.call(rbind, list_rows)
}  
)

X_reconstruction_2 <- do.call(cbind, X_reconstruction_list_2)


df_2 <-as.cimg(array(X_reconstruction_2, dim=dim(image))) %>% as.data.frame
p_2 <- ggplot(df_2,aes(x,y))+geom_raster(aes(fill=value)) +
   scale_y_continuous(trans=scales::reverse_trans(), expand = c(0,0)) + ## pour mettre l'image dans le bon sens et supprimer les bors gris
  scale_x_continuous(expand=c(0,0)) +
  scale_fill_gradient(low="black",high="white") + ## pour le noir et blanc
  theme(legend.position = "none")

```



```{r original_img}
#| echo: false
#| fig-cap: "Original Beatles"
p_origine
```

```{r twodim_img}
#| echo: false
#| fig-cap: "With 2 principal components"
p_2
```

```{r onedim_img}
#| echo: false
#| fig-cap: "With 1 principal component"
p_1
```
